name: HSMServer build
on:
  push:
    branches: [master, develop]

  workflow_dispatch:
    inputs:
      isPreRelease:
        description: 'PreRelease'
        type: boolean
        required: true
        default: false
env:
  OUTPUT_FOLDER: ${{ github.workspace }}/BuildOutput

  SOLUTION_PATH: src/server/HSMServer/HSMServer.sln
  SERVER_PATH: src/server/HSMServer/HSMServer.csproj

  DOCKERHUB_USER: redleonfire
  DOCKER_DEPS_REPOS: hsm_deps
  DOCKER_MAIN_REPOS: hsm

jobs:
  build:
    runs-on: windows-latest
    outputs:
      VERSION: ${{ steps.save-version.outputs.version }}
      ARTIFACT_NAME: ${{ steps.build-artifact-name.outputs.name}}
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 7.0.x

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build Solution
      run: dotnet build ${{ env.SOLUTION_PATH }} -c Release --no-restore

    - name: Test Solution
      run: dotnet test ${{ env.SOLUTION_PATH }}

    - name: Publish HSMServer
      run: dotnet publish ${{ env.SERVER_PATH }} -c Release -o ${{ env.OUTPUT_FOLDER }}

    - id: save-version
      name: Try to get server version
      run: echo "version=$((Get-Item ${{ env.OUTPUT_FOLDER }}/HSMServer.exe).VersionInfo.ProductVersion)" >> $env:GITHUB_OUTPUT

    - id: build-artifact-name
      name: Build artifact name
      run: echo "name=HSMServer v${{ steps.save-version.outputs.version }}" >> $env:GITHUB_OUTPUT

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        path: ${{ env.OUTPUT_FOLDER }}
        name: ${{ steps.build-artifact-name.outputs.name }}


  create-tag:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    needs: build
    outputs:
      BUILD_TAG: ${{ steps.save-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3

      - id: save-tag
        name: Create tag
        run: echo "tag=server-v${{ needs.build.outputs.VERSION }}" >> $GITHUB_OUTPUT

      - name: Build release tag message
        if: ${{ !github.event.inputs.isPreRelease }}
        run: echo "TagMessage=Release version HSMServer-${{ needs.build.outputs.VERSION }}" >> $GITHUB_ENV

      - name: Build prerelease tag message
        if: ${{ github.event.inputs.isPreRelease }}
        run: echo "TagMessage=PreRelease version HSMServer-${{ needs.build.outputs.VERSION }} for developers" >> $GITHUB_ENV

      - name: Push tag
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ steps.save-tag.outputs.tag }}
          message: ${{ env.TagMessage }}
          force_push_tag: true


  create-release:
    runs-on: ubuntu-latest
    needs: [build, create-tag]
    env:
      ReleaseNote: "ReleaseNote.md"
    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.ARTIFACT_NAME }}
          path: ${{ env.OUTPUT_FOLDER }}

      - name: Create archive name
        run: echo "ArtifactZip=HSMServer-${{ needs.build.outputs.VERSION }}.zip" >> $GITHUB_ENV

      - name: Check archive name
        run: echo $ArtifactZip

      - name: Archive artifacts
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          path: ${{ env.OUTPUT_FOLDER }}
          filename: ${{ env.ArtifactZip }}

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ needs.build.outputs.ARTIFACT_NAME }}
          tag: ${{ needs.create-tag.outputs.BUILD_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.ArtifactZip }}
          prerelease: ${{ github.event.inputs.isPreRelease }}
          bodyFile: ${{ env.ReleaseNote }}
          allowUpdates: true


  publish-docker-deps:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment: DockerHub
    env:
      DockerfilePath: .github/docker/dockerfile_deps
      DepsTag: latest
    outputs:
      DOCKER_DEPS_TAG: ${{ steps.save-deps-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUBUSERNAME }}
          password: ${{ secrets.DOCKERHUBTOKEN }}

      - id: save-deps-tag
        name: Save deps tag
        run: echo "tag=${{ env.DOCKERHUB_USER }}/${{ env.DOCKER_DEPS_REPOS }}:${{env.DepsTag}}" >> $GITHUB_OUTPUT

      - name: Build deps image for main Docker container
        run: docker build . -f ${{ env.DockerfilePath }} -t ${{ steps.save-tag.outputs.tag }}

      - name: Push image to remote Docker
        run: docker push ${{ steps.save-tag.outputs.tag }}


  publish-docker-image:
    runs-on: ubuntu-latest
    needs: [build, publish-docker-deps]
    environment: DockerHub
    env:
      DockerReposUrlPrefix: index.docker.io
    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUBUSERNAME }}
          password: ${{ secrets.DOCKERHUBTOKEN }}

      - name: Build full deps url
        run: echo "DockerDepsUrl=${{ env.DockerReposUrlPrefix }}/${{ needs.publish-docker-deps.outputs.DOCKER_DEPS_TAG }}" >> $GITHUB_ENV

      - name: Build full main repos name
        run: echo "DockerMainName=${{ env.DOCKERHUB_USER }}/${{ env.DOCKER_MAIN_REPOS }}" >> $GITHUB_ENV

      - name: Build Linux image for Docker
        run: dotnet publish ${{ env.SERVER_PATH }} --os linux --arch x64 -c Release -p:ContainerBaseImage=${{ env.DockerDepsUrl }} -p:ContainerImageName=${{ env.DockerMainName }} -p:ContainerImageTags=${{ needs.build.outputs.VERSION }}

      - name: Push image to remote Docker
        run: docker push "${{ env.DockerMainName }}:${{ needs.build.outputs.VERSION }}"