@using HSMServer.Extensions

@model HSMServer.Model.TreeViewModels.TreeNodeStateViewModel

@{
    var data = Model.Data;
    var isEmptyProduct = data.AllSensorsCount == 0;
}


<li id='@data.EncodedId' title='@data.Tooltip' data-jstree='{"title" : "@data.Title", "icon" : "@data.Status", "time" : "@data.UpdateTime"}'>
    <span>@Html.Raw(data.Name.GetShortNodeName()) @Model.GetSensorsCountString()</span>

    @if (!isEmptyProduct)
    {
        @if (Model.IsAllNotificationsIgnored)
        {
            <span>
                <i id="@(data.EncodedId)_ignoreNotifications" class="fa-solid fa-bell-slash fa-xs"></i>
            </span>
        }
        else if (Model.IsAnyNotificationsEnabled)
        {
            <span>
                <i id="@(data.EncodedId)_notifications" class="fab fa-telegram fa-xs"></i>
                <input id='@(data.EncodedId)_partialNotifications' value='@((!Model.IsAllNotificationsEnabled).ToString())' style='display: none' />
            </span>
        }
    }

    @if (data.HasGroupNotifications)
    {
        <span>
            <i class="fa-solid fa-people-group"></i>
        </span>
    }

    @foreach (var child in Model.Nodes)
    {
        <ul>@await Html.PartialAsync("_TreeNode", child)</ul>
    }
    
    @if (Model.Sensors.Count > 0)
    {
        <ul>
            @foreach (var sensor in Model.Sensors)
                @await Html.PartialAsync("_TreeSensor", sensor)
        </ul>
    }
</li>
