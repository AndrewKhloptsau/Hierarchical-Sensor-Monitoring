@using HSMServer.Constants
@using HSMServer.HtmlHelpers
@model HSMServer.Model.ViewModel.TreeViewModel

@{
    ViewData["Title"] = "Tree";
}
<script>
    var updateLists = "@Html.Raw(Url.Action(ViewConstants.UpdateInvisibleListsAction, ViewConstants.HomeController))";
    var updateSelectedList = "@Html.Raw(Url.Action(ViewConstants.UpdateSelectedListAction, ViewConstants.HomeController))";
    var addNewSensors = "@Html.Raw(Url.Action(ViewConstants.AddNewSensorsAction, ViewConstants.HomeController))";
    var updateTree = "@Html.Raw(Url.Action(ViewConstants.UpdateTreeAction, ViewConstants.HomeController))";
    var getFileAction = "@Html.Raw(Url.Action(ViewConstants.GetFileAction, ViewConstants.HomeController))";
    var viewFileAction = "@Html.Raw(Url.Action(ViewConstants.GetFileStreamAction, ViewConstants.HomeController))";
    var selected = "";

    var historyAllAction = "@Html.Raw(Url.Action(ViewConstants.HistoryAllAction, ViewConstants.HomeController))";
    var historyAction = "@Html.Raw(Url.Action(ViewConstants.HistoryAction, ViewConstants.HomeController))";

    var rawHistoryAction = "@Html.Raw(Url.Action(ViewConstants.RawHistoryAction, ViewConstants.HomeController))";
    var rawHistoryAllAction = "@Html.Raw(Url.Action(ViewConstants.RawHistoryAllAction, ViewConstants.HomeController))";

    var exportHistoryHourAction = "@Html.Raw(Url.Action(ViewConstants.ExportHistoryHour, ViewConstants.HomeController))";
    var exportHistoryDayAction = "@Html.Raw(Url.Action(ViewConstants.ExportHistoryDay, ViewConstants.HomeController))";
    var exportHistoryThreeDaysAction = "@Html.Raw(Url.Action(ViewConstants.ExportHistoryThreeDays, ViewConstants.HomeController))";
    var exportHistoryWeekAction = "@Html.Raw(Url.Action(ViewConstants.ExportHistoryWeek, ViewConstants.HomeController))";
    var exportHistoryMonthAction = "@Html.Raw(Url.Action(ViewConstants.ExportHistoryMonth, ViewConstants.HomeController))";
    var exportHistoryAllAction = "@Html.Raw(Url.Action(ViewConstants.ExportHistoryAll, ViewConstants.HomeController))";
</script>


<style>
    .file-sensor-shortvalue-div {
        margin: 10px;
    }

    .button-view-file-sensor {
        margin-left: 0px;
        margin-top: 10px
    }

    .button-download-file-sensor-value {
        margin-top: 10px;
        margin-left: -20px;
    }

    .tree-icon-unknown {
        color: gray;
    }

    .tree-icon-ok {
        color: green;
    }

    .tree-icon-warning {
        color: yellow;
    }

    .tree-icon-error {
        color: red;
    }

    .sensor-icon-with-margin {
        margin-right: 5px;
    }

    .time-ago-div {
        color: grey;
    }
</style>

<link rel="stylesheet" href="~/js/jstree/themes/default/style.min.css" />

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js"></script>

<script src="/js/signalr/dist/browser/signalr.min.js"></script>
<script src="/js/home/plotting.js"></script>
<script src="~/js/home/list.js"></script>
<script src="~/js/home/file.js"></script>
<script src="~/js/home/tree.js"></script>
<script src="~/js/home/history.js"></script>
<script src="~/js/plotly.js/plotly.min.js"></script>
<script src="~/js/jstree/jstree.min.js"></script>

<div style="margin: 10px">
    <div class="row">
        <div class="col-md-auto">
            <div id="state"></div>
        </div>
        <div class="col-md-auto">
            <div id="updateTime"></div>
        </div>
    </div>
    <hr />
</div>

<div class="container">
    <div id="mainContainer" class="row">
        <div id="treeContainer" class="col-md-auto">@ViewHelper.CreateTree(Model)</div>

        <div id="listContainer" class="col">@ViewHelper.CreateFullLists(Model)</div>
    </div>
    <hr />
</div>

<script>
    initializeTree();
    initializeDataHistoryRequests();
    InitializePeriodRequests();
    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl('/monitoring')
        .build();

    $("#state").empty();
    $("#state").append("<span style='color: green' value='Connection successful'><i class='fas fa-wifi'></i></span>");

    hubConnection.on('SendSensorUpdates', function (sensors) {
        if (sensors == undefined) return;

        //update tree
        $.ajax({
            type: 'POST',
            data: JSON.stringify(sensors),
            url: updateTree,
            dataType: 'html',
            contentType: 'application/json',
            cache: false,
            async: true
        }).done(function (treeData) {
            var node = $('#jstree').jstree().get_selected(true)[0];

            treeData = treeData.replace('{"value":"', '');
            treeData = treeData.slice(0, treeData.length - 2);
            treeData = treeData.replaceAll("\\", "");

            $('#treeContainer').empty();
            $('#treeContainer').append(treeData); 

            $('#jstree').jstree();
            if (node !== undefined && node != undefined) {
                $('#jstree').jstree('select_node', node.id);
            }
            initializeClickTree();
            //initializeDataHistoryRequests();
        });

        var selectedNode = $('#jstree').jstree().get_selected(true)[0];
        var listId = "";
        if (selectedNode != undefined) listId = 'list_' + selectedNode.id;

        //update invisible lists
        $.ajax({
            type: 'POST',
            data: JSON.stringify(sensors),
            url: updateLists + '?Selected=' + listId,
            dataType: 'html',
            contentType: 'application/json',
            cache: false,
            async: true
        }).done(function (listsData) {
            //removing invisible lists
            $('[id^="list_"][style*="display: none;"]').each(function (index) {
                this.remove();
            });

            listsData = listsData.replace('{"value":"', '');
            listsData = listsData.slice(0, listsData.length - 2);
            listsData = listsData.replaceAll("\\", "");

            $('#listContainer').append(listsData);
            initializeDataHistoryRequests();
        });

        if (listId != "" && listId != undefined)
        //update selected list
        $.ajax({
            type: 'POST',
            data: JSON.stringify(sensors),
            url: updateSelectedList + '?Selected=' + listId,
            dataType: 'html',
            contentType: 'application/json',
            cache: false,
            async: true
        }).done(function (listsData) {
            var array = JSON.parse(listsData);
            for (let i = 0; i < array.length; i++) {
                var id = array[i].id.substring('list_'.length, array[i].id.length);

                $('#value_' + id).empty().append(array[i].value);
                $('#update_' + id).empty().append('updated ' + array[i].updateTime);
                $('#status_' + id).removeClass('tree-icon-unknown ' +
                    'tree-icon-ok ' + 'tree-icon-warning ' + 'tree-icon-error ' + 'tree-icon-unknown');
                $('#status_' + id).addClass(array[i].status);

                initializeDataHistoryRequests();

                let selectedRadio = $('input[id$=' + id + ']:checked');
                if (selectedRadio !== undefined) {
                    selectedRadio.click();
                }
                //var selectedAccordion = $('button[id^="' + id + '"][class*=accordion-button][aria-expanded=true]');
                //let selectedRadio = $('input[type="radio"]:checked');
                //if (selectedRadio !== undefined) {
                //    selectedRadio.click();
                //}
            }
        });

        if (listId != "" && listId != undefined)
        //add new sensors
        $.ajax({
            type: 'POST',
            data: JSON.stringify(sensors),
            url: addNewSensors + '?Selected=' + listId,
            dataType: 'html',
            contentType: 'application/json',
            cache: false,
            async: true
        }).done(function (sensorsData) {
            sensorsData = sensorsData.replace('{"value":"', '');
            sensorsData = sensorsData.slice(0, sensorsData.length - 2);
            sensorsData = sensorsData.replaceAll("\\", "");

            if ($('#' + listId) == undefined) {
                $('#listContainer').append("<div class='accordion'" +
                    "id = '" + listId + "' style = 'display: block;' ></div> ");
                $('#noData').css('display', 'none');
            }

            $('#' + listId).append(sensorsData);
            initializeDataHistoryRequests();
        });

        $('#updateTime').empty();
        $('#updateTime').append('Update Time: ' + new Date().toUTCString());
        $("#state").empty();
        $("#state").append("<span style='color: green' value='Connection successful'><i class='fas fa-wifi'></i></span>");
        
    });

    hubConnection.onclose(error => {
        $("#state").empty();
        $("#state").append("<span style='color: Tomato' value='Connection lost'><i class='fas fa-wifi'></i></span>");
    });

    hubConnection.start().then(() => {
        //console.log(hubConnection.connectionId);
    });

    function update() {
        var selectedNode = $('#jstree').jstree().get_selected(true)[0];
        var listId = "";
        if (selectedNode != undefined) listId = 'list_' + selectedNode.id;

        //update invisible lists
        $.ajax({
            type: 'POST',
            url: updateLists + '?Selected=' + listId,
            dataType: 'html',
            contentType: 'application/json',
            cache: false,
            async: true
        }).done(function (listsData) {
            //removing invisible lists
            $('[id^="list_"][style*="display: none;"]').each(function (index) {
                this.remove();
            });

            listsData = listsData.replace('{"value":"', '');
            listsData = listsData.slice(0, listsData.length - 2);
            listsData = listsData.replaceAll("\\", "");

            $('#listContainer').append(listsData);

            initializeDataHistoryRequests();
        });

        if (listId != "" && listId != undefined)
            //update selected list
            $.ajax({
                type: 'POST',
                url: updateSelectedList + '?Selected=' + listId,
                dataType: 'html',
                contentType: 'application/json',
                cache: false,
                async: true
            }).done(function (listsData) {
                var array = JSON.parse(listsData);
                for (let i = 0; i < array.length; i++) {
                    var id = array[i].id.substring('list_'.length, array[i].id.length);

                    $('#value_' + id).empty().append(array[i].value);
                    $('#update_' + id).empty().append('updated ' + array[i].updateTime);
                    $('#status_' + id).removeClass('tree-icon-unknown ' +
                        'tree-icon-ok ' + 'tree-icon-warning ' + 'tree-icon-error ' + 'tree-icon-unknown');
                    $('#status_' + id).addClass(array[i].status);

                    initializeDataHistoryRequests();

                    let selectedRadio = $('input[id$=' + id + ']:checked');
                    if (selectedRadio !== undefined) {
                        selectedRadio.click();
                    }
                    
                    //var selectedAccordion = $('button[id^="' + id + '"][class*=accordion-button][aria-expanded=true]');
                    //$('#reload_' + selectedAccordion.attr('id')).click();
                    //let selectedRadio = $('input[type="radio"]:checked');
                    //if (selectedRadio !== undefined) {
                    //    selectedRadio.click();
                    //}
                }
            });

        $('#updateTime').empty();
        $('#updateTime').append('Update Time: ' + new Date().toUTCString());
        $("#state").empty();
        $("#state").append("<span style='color: green' value='Connection successful'><i class='fas fa-wifi'></i></span>");

    }

    setInterval(update, 30000);
</script>
