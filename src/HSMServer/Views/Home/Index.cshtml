@using HSMServer.Constants
@using HSMServer.Model.ViewModel
@model HSMServer.Model.TreeViewModels.TreeViewModel

@{
    ViewData["Title"] = "Tree";
}

<script>
    var updateSelectedList = "@Html.Raw(Url.Action(ViewConstants.UpdateSelectedListAction, ViewConstants.HomeController))";
    var addNewSensors = "@Html.Raw(Url.Action(ViewConstants.AddNewSensorsAction, ViewConstants.HomeController))";
    var getFileAction = "@Html.Raw(Url.Action(ViewConstants.GetFileAction, ViewConstants.HomeController))";
    var viewFileAction = "@Html.Raw(Url.Action(ViewConstants.GetFileStreamAction, ViewConstants.HomeController))";
    var selected = "";

    var selectNode = "@Html.Raw(Url.Action(ViewConstants.SelectNodeAction, ViewConstants.HomeController))";
    var refreshTree = "@Html.Raw(Url.Action(ViewConstants.RefreshTreeAction, ViewConstants.HomeController))";

    var removeNode = "@Html.Raw(Url.Action(ViewConstants.RemoveNodeAction, ViewConstants.HomeController))";
    var removeSensorAction = "@Html.Raw(Url.Action(ViewConstants.RemoveSensorAction, ViewConstants.HomeController))";
    var removeSensorsAction = "@Html.Raw(Url.Action(ViewConstants.RemoveSensorsAction, ViewConstants.HomeController))";

    var historyAllAction = "@Html.Raw(Url.Action(ViewConstants.HistoryAllAction, ViewConstants.HomeController))";
    var historyAction = "@Html.Raw(Url.Action(ViewConstants.HistoryAction, ViewConstants.HomeController))";

    var rawHistoryAction = "@Html.Raw(Url.Action(ViewConstants.RawHistoryAction, ViewConstants.HomeController))";
    var rawHistoryAllAction = "@Html.Raw(Url.Action(ViewConstants.RawHistoryAllAction, ViewConstants.HomeController))";

    var historyLatestAction = "@Html.Raw(Url.Action(ViewConstants.HistoryLatestAction, ViewConstants.HomeController))";
    var rawHistoryLatestAction = "@Html.Raw(Url.Action(ViewConstants.RawHistoryLatestAction, ViewConstants.HomeController))";

    var exportHistoryAction = "@Html.Raw(Url.Action(ViewConstants.ExportHistoryAction, ViewConstants.HomeController))";
    var exportHistoryAllAction = "@Html.Raw(Url.Action(ViewConstants.ExportHistoryAllAction, ViewConstants.HomeController))";

    var isTimeSorting = false;

    var getSensorInfoAction = "@Html.Raw(Url.Action(ViewConstants.GetSensorInfoAction, ViewConstants.HomeController))";
    var updateSensorInfoAction = "@Html.Raw(Url.Action(ViewConstants.UpdateSensorInfoAction, ViewConstants.HomeController))";
</script>

<link rel="stylesheet" href="~/js/jstree/themes/default/style.min.css" />
<link rel="stylesheet" href="~/css/bundles/homeBundle.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js"></script>

<script src="/js/signalr/dist/browser/signalr.min.js"></script>
<script src="~/js/bundles/homeBundle.min.js"></script>
<script src="~/js/plotly.js/plotly.min.js"></script>
<script src="~/js/jstree/jstree.min.js"></script>
<script src="~/moment.js/moment.min.js"></script>

<div class="modal fade" id="modalDelete" tabindex="-1" aria-labelledby="modalDeleteLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalDeleteLabel">Remove product</h5>
            </div>

            <div id="modalDeleteBody" class="modal-body">

            </div>

            <div class="modal-footer">
                <button id="confirmDeleteButton" type="button" class="btn btn-secondary">Ok</button>
                <button id="closeDeleteButton" type="button" class="btn btn-secondary" data-bs-dismiss="modalDelete">Cancel</button>

            </div>
        </div>
    </div>
</div>




<div id="mainContainer">
    <div style="margin: 10px">
        <div class="row">
            <div class="col-md-auto">
                <div id="state"></div>
            </div>
            <div class="col-md-auto">
                <div id="updateTime"></div>
            </div>
        </div>
        <hr />
    </div>

    <div class="row">

    </div>

    <div class='btn-group' style="margin-left: 20px; margin-bottom: 10px">
        <button class='btn btn-secondary btn-sm dropdown-toggle' type='button' data-bs-toggle='dropdown'>
            Views
        </button>
        <ul class='dropdown-menu'>
            <li>
                <a class='dropdown-item' href='#' id="sortByName">Sort By Name <i class="fas fa-sort-alpha-down"></i></a>
            </li>

            <li>
                <a class='dropdown-item' href='#' id="sortByTime">Sort By Last Update <i class="fas fa-sort-numeric-down-alt"></i></a>
            </li>
        </ul>
    </div>

    <div>
        <div id="mainContainer" class="row">
            <div class="scrollableBlock">
                <div id="treeContainer" class="col-md-4">
                    <div class="col-md-auto">
                        <div id="jstree">@await Html.PartialAsync("_Tree", Model)</div>
                    </div>
                </div>
            </div>


            @*<div id="listContainer" class="col-md-8">@ViewHelper.CreateFullLists(Model)</div>*@
            <div id="listSensors" class="col-md-8">@await Html.PartialAsync("_TreeNodeSensors", (NodeViewModel)null)</div>
        </div>
        <hr />
    </div>
</div>



<script>
    initializeTree();
    //initializeDataHistoryRequests();
    InitializePeriodRequests();
    initializeInfoLinks();

    $("#state").empty();
    $("#state").append("<span style='color: green' value='Connection successful'><i class='fas fa-wifi'></i></span>");

    function update() {
        var selectedNode = $('#jstree').jstree().get_selected(true)[0];
        var listId = getListIdForSelectedNode(selectedNode);

        if (listId != "" && listId != undefined)
            //update selected list
            $.ajax({
                type: 'POST',
                url: updateSelectedList + '?Selected=' + listId,
                dataType: 'html',
                contentType: 'application/json',
                cache: false,
                async: true
            }).done(function (listsData) {
                var array = JSON.parse(listsData);
                for (let i = 0; i < array.length; i++) {
                    let id = array[i].id.substring('sensor_'.length);
                    updateSelectedSensor(array[i], id);
                    let selectedRadio = $('input[id$=' + id + ']:checked');
                    if (selectedRadio !== undefined) {
                        selectedRadio.click();
                    }
                }
                //initializeDataHistoryRequests();
                initializeInfoLinks();
            });

        $('#updateTime').empty();
        $('#updateTime').append('Update Time: ' + new Date().toUTCString());
        $("#state").empty();
        $("#state").append("<span style='color: green' value='Connection successful'><i class='fas fa-wifi'></i></span>");
    }

    setInterval(update, 30000);
    $('#sortByName').off("click").on("click",
        function () {
            isTimeSorting = false;
            initializeTree();
            $('#jstree').jstree(true).refresh(true);
        });

    $('#sortByTime').off("click").on("click",
        function () {
            isTimeSorting = true;
            initializeTree();
            $('#jstree').jstree(true).refresh(true);
        });

    function getListIdForSelectedNode(selectedNode) {
        let selectedListId = "";
        if (selectedNode != undefined) {
            let nodeId = selectedNode.id;
            if (nodeId.startsWith("sensor_")) {
                //let path = nodeId.substring("sensor_".length);
                selectedListId = 'list_' + selectedNode.parent;
            } else {
                selectedListId = 'list_' + nodeId;
            }
        }
        return selectedListId;
    }

    function updateSelectedSensor(dataObject, id) {
        $('#value_' + id).empty().append(dataObject.value);
        $('#update_' + id).empty().append('updated ' + dataObject.updateTime);
        $('#status_' + id).removeClass('tree-icon-unknown ' +
            'tree-icon-ok ' +
            'tree-icon-warning ' +
            'tree-icon-error ' +
            'tree-icon-unknown');
        $('#status_' + id).addClass(dataObject.status);
        clearValidationError(id);
        if (dataObject.ValidationError != null || dataObject.validationError) {
            updateValidationError(id, dataObject.validationError);
        }
    }

    function clearValidationError(id) {
        $('#validation_' + id).empty();
    }

    function updateValidationError(id, error) {
        $('#validation_' + id).append("<li id='errorIcon_ " + id + "' class='fas fa-exclamation-triangle' style='margin-right:5px'" +
            " title=' " + error + "'></li>");
    }

    function updateTreeTimer() {
        $.ajax({
            type: 'POST',
            url: refreshTree,
            dataType: 'html',
            contentType: 'application/json',
            cache: false,
            async: true
        }).done(function (treeData) {
            $('#jstree').jstree(true).settings.core.data = treeData;
            $('#jstree').jstree(true).refresh(true);
        });
    }

    setInterval(updateTreeTimer, 5000);
</script>