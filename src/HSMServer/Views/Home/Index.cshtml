@using HSMServer.Constants
@using HSMServer.HtmlHelpers
@model HSMServer.Model.ViewModel.TreeViewModel

@{
    ViewData["Title"] = "Home Page";
}
<script>
    var urlAction = "@Html.Raw(Url.Action(ViewConstants.UpdateAction, ViewConstants.HomeController))";
    var historyAction = "@Html.Raw(Url.Action(ViewConstants.HistoryAction, ViewConstants.HomeController))";
    var viewFileAction = "@Html.Raw(Url.Action(ViewConstants.ViewFileAction, ViewConstants.HomeController))";
    var downloadFileAction = "@Html.Raw(Url.Action(ViewConstants.DownloadFileAction, ViewConstants.HomeController))";
</script>

<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
    .file-sensor-shortvalue-div {
        font-size: medium;
        font-weight: normal;
        margin: 15px;
    }
    .button-view-file-sensor {
        margin: 0px 10px 0px 0px;
    }
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/themes/default/style.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.3/jstree.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.min.js"></script>

<script src="https://kit.fontawesome.com/96e197af10.js" crossorigin="anonymous"></script>
<link href="~/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />

<script src="/js/signalr/dist/browser/signalr.min.js"></script>

<div style="margin: 10px">
    <div id="updateTime"></div>
    <hr />
</div>

<div class="container">
    <div id="mainContainer" class="row">
        @ViewHelper.CreateTreeWithLists(Model)

    </div>
    <hr />
</div>

<script>
    initializeTree();

    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl('/monitoring')
        .build();

    hubConnection.on('SendSensorUpdates', function (newModel) {
        if (newModel == undefined) return;

        $.ajax({
            type: 'POST',
            data: JSON.stringify(newModel),
            url: urlAction,
            dataType: 'html',
            contentType: 'application/json',
            cache: false,
            async: true
        }).done(function (data) {
            var node = $('#jstree').jstree().get_selected(true)[0];

            data = data.replace('{"value":"', '');//fix sometime
            data = data.replace('"}', '');

            $("#mainContainer").empty();
            $("#mainContainer").append(data);

            initializeTree();

            $('#list_' + node.id).css('display', 'block');
            $('#jstree').jstree('select_node', node.id);

            $('#updateTime').empty();
            $('#updateTime').append('Update Time: ' + new Date().toUTCString());
        });
    });

    hubConnection.start().then(() => {
        console.log(hubConnection.connectionId);
    });

    function data(product, path, totalCount) {
        return { "Path": path, "Product": product, "TotalCount": totalCount };
    }

    function fileData(product, path) {
        return { "Product": product, "Path": path };
    }

    function initializeHistory(product, path, totalCount, historyAction) {
        if (totalCount == undefined)
            totalCount = 10;

        $.ajax({
            type: 'POST',
            data: JSON.stringify(data(product, path, totalCount)),
            url: historyAction,
            dataType: 'html',
            contentType: 'application/json',
            cache: false,
            async: true
        }).done(function (data) {
            //console.log(data);

            data = data.replace('{"value":"', ''); //fix sometime
            data = data.replace('"}', '');

            console.log(`#values_${product}_${path}`);

            $(`#values_${product}_${path}`).empty();
            $(`#values_${product}_${path}`).append(data);
        });
    }

    function viewFile(product, path, viewFileAction) {
        console.log('In view file function');
        $.ajax({
            type: 'POST',
            data: JSON.stringify(fileData(product, path)),
            url: viewFileAction,
            cache: false,
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                console.log(data);
            }
        });
    }

    function downloadFile(product, path, downloadFileAction) {
        console.log('In download file function');
        console.log('Product: ', product);
        console.log('Path: ', path);
        $.ajax({
            type: 'POST',
            data: JSON.stringify(fileData(product, path)),
            url: downloadFileAction,
            cache: false,
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                console.log(data);
            }
        });
    }

    $(".accordion-button").on("click", function () {
        product = this.id.split('_')[0];
        path = this.id.substring(product.length + 1, this.id.length);
        totalCount = $('#inputCount_' + this.id).val();

        initializeHistory(product, path, totalCount, historyAction);
    });

    $('[id^="reload_"]').on("click",
        function() {
            id = this.id.substring("reload_".length, this.id.length);
            product = id.split('_')[0];
            path = id.substring(product.length + 1, this.id.length);
            totalCount = $('#inputCount_' + id).val();

            initializeHistory(product, path, totalCount, historyAction);
        });

    $('[id^="button_view"]').on("click",
        function () {
            id = this.id.substring("button_view".length, this.id.length);
            product = id.split('_')[0];
            path = id.substring(product.length + 1, this.id.length);

            viewFile(product, path, viewFileAction);
        }
    );

    $('[id^="button_download"]').on("click",
        function () {
            id = this.id.substring("button_view".length, this.id.length);
            product = id.split('_')[0];
            path = id.substring(product.length + 1, this.id.length);

            downloadFile(product, path, downloadFileAction);
        }
    );

    function initializeTree() {
        $('#jstree').jstree();

        $('#updateTime').empty();
        $('#updateTime').append('Update Time: ' + new Date().toUTCString());

        $('#jstree').on('activate_node.jstree', function (e, data) {
            if (data == undefined || data.node == undefined || data.node.id == undefined)
                return;
            //alert('clicked node: ' + data.node.id);

            $('[id^="list_"]').css("display", "none"); //start with

            if (document.getElementById('list_' + data.node.id) == null)
                $('#list_sensors_header').css('display', 'none');
            else
                $('#list_sensors_header').css('display', 'block');

            $('#list_' + data.node.id).css('display', 'block');
        });
    }
</script>
